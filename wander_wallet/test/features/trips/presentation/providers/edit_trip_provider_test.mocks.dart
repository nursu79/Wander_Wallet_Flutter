// Mocks generated by Mockito 5.4.6 from annotations
// in wander_wallet/test/features/trips/presentation/providers/edit_trip_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:io' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:wander_wallet/core/models/error.dart' as _i6;
import 'package:wander_wallet/core/models/payload.dart' as _i5;
import 'package:wander_wallet/core/models/result.dart' as _i4;
import 'package:wander_wallet/features/trips/domain/trips_repository.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TripsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTripsRepository extends _i1.Mock implements _i2.TripsRepository {
  MockTripsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<_i5.TripPayload, _i6.TripError>> createTrip(
    String? name,
    String? destination,
    num? budget,
    DateTime? startDate,
    DateTime? endDate,
    _i7.File? tripImage,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createTrip, [
              name,
              destination,
              budget,
              startDate,
              endDate,
              tripImage,
            ]),
            returnValue:
                _i3.Future<_i4.Result<_i5.TripPayload, _i6.TripError>>.value(
                  _i8.dummyValue<_i4.Result<_i5.TripPayload, _i6.TripError>>(
                    this,
                    Invocation.method(#createTrip, [
                      name,
                      destination,
                      budget,
                      startDate,
                      endDate,
                      tripImage,
                    ]),
                  ),
                ),
          )
          as _i3.Future<_i4.Result<_i5.TripPayload, _i6.TripError>>);

  @override
  _i3.Future<_i4.Result<_i5.TripsPayload, _i6.MessageError>> getAllTrips() =>
      (super.noSuchMethod(
            Invocation.method(#getAllTrips, []),
            returnValue: _i3.Future<
              _i4.Result<_i5.TripsPayload, _i6.MessageError>
            >.value(
              _i8.dummyValue<_i4.Result<_i5.TripsPayload, _i6.MessageError>>(
                this,
                Invocation.method(#getAllTrips, []),
              ),
            ),
          )
          as _i3.Future<_i4.Result<_i5.TripsPayload, _i6.MessageError>>);

  @override
  _i3.Future<_i4.Result<_i5.TripsPayload, _i6.MessageError>> getPastTrips() =>
      (super.noSuchMethod(
            Invocation.method(#getPastTrips, []),
            returnValue: _i3.Future<
              _i4.Result<_i5.TripsPayload, _i6.MessageError>
            >.value(
              _i8.dummyValue<_i4.Result<_i5.TripsPayload, _i6.MessageError>>(
                this,
                Invocation.method(#getPastTrips, []),
              ),
            ),
          )
          as _i3.Future<_i4.Result<_i5.TripsPayload, _i6.MessageError>>);

  @override
  _i3.Future<_i4.Result<_i5.TripsPayload, _i6.MessageError>>
  getCurrentTrips() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentTrips, []),
            returnValue: _i3.Future<
              _i4.Result<_i5.TripsPayload, _i6.MessageError>
            >.value(
              _i8.dummyValue<_i4.Result<_i5.TripsPayload, _i6.MessageError>>(
                this,
                Invocation.method(#getCurrentTrips, []),
              ),
            ),
          )
          as _i3.Future<_i4.Result<_i5.TripsPayload, _i6.MessageError>>);

  @override
  _i3.Future<_i4.Result<_i5.TripsPayload, _i6.MessageError>>
  getPendingTrips() =>
      (super.noSuchMethod(
            Invocation.method(#getPendingTrips, []),
            returnValue: _i3.Future<
              _i4.Result<_i5.TripsPayload, _i6.MessageError>
            >.value(
              _i8.dummyValue<_i4.Result<_i5.TripsPayload, _i6.MessageError>>(
                this,
                Invocation.method(#getPendingTrips, []),
              ),
            ),
          )
          as _i3.Future<_i4.Result<_i5.TripsPayload, _i6.MessageError>>);

  @override
  _i3.Future<_i4.Result<_i5.TripPayload, _i6.MessageError>> getTrip(
    String? id,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getTrip, [id]),
            returnValue:
                _i3.Future<_i4.Result<_i5.TripPayload, _i6.MessageError>>.value(
                  _i8.dummyValue<_i4.Result<_i5.TripPayload, _i6.MessageError>>(
                    this,
                    Invocation.method(#getTrip, [id]),
                  ),
                ),
          )
          as _i3.Future<_i4.Result<_i5.TripPayload, _i6.MessageError>>);

  @override
  _i3.Future<_i4.Result<_i5.MessagePayload, _i6.MessageError>> deleteTrip(
    String? id,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTrip, [id]),
            returnValue: _i3.Future<
              _i4.Result<_i5.MessagePayload, _i6.MessageError>
            >.value(
              _i8.dummyValue<_i4.Result<_i5.MessagePayload, _i6.MessageError>>(
                this,
                Invocation.method(#deleteTrip, [id]),
              ),
            ),
          )
          as _i3.Future<_i4.Result<_i5.MessagePayload, _i6.MessageError>>);

  @override
  _i3.Future<_i4.Result<_i5.TripPayload, _i6.TripError>> updateTrip(
    String? id,
    String? name,
    String? destination,
    num? budget,
    DateTime? startDate,
    DateTime? endDate,
    _i7.File? tripImage,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateTrip, [
              id,
              name,
              destination,
              budget,
              startDate,
              endDate,
              tripImage,
            ]),
            returnValue:
                _i3.Future<_i4.Result<_i5.TripPayload, _i6.TripError>>.value(
                  _i8.dummyValue<_i4.Result<_i5.TripPayload, _i6.TripError>>(
                    this,
                    Invocation.method(#updateTrip, [
                      id,
                      name,
                      destination,
                      budget,
                      startDate,
                      endDate,
                      tripImage,
                    ]),
                  ),
                ),
          )
          as _i3.Future<_i4.Result<_i5.TripPayload, _i6.TripError>>);
}
