// Mocks generated by Mockito 5.4.6 from annotations
// in wander_wallet/test/features/auth/presentation/providers/splash_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:io' as _i8;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:wander_wallet/core/models/error.dart' as _i6;
import 'package:wander_wallet/core/models/payload.dart' as _i5;
import 'package:wander_wallet/core/models/result.dart' as _i4;
import 'package:wander_wallet/features/auth/domain/auth_repository.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i2.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<_i5.LoginPayload, _i6.UserError>> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#login, [email, password]),
            returnValue:
                _i3.Future<_i4.Result<_i5.LoginPayload, _i6.UserError>>.value(
                  _i7.dummyValue<_i4.Result<_i5.LoginPayload, _i6.UserError>>(
                    this,
                    Invocation.method(#login, [email, password]),
                  ),
                ),
          )
          as _i3.Future<_i4.Result<_i5.LoginPayload, _i6.UserError>>);

  @override
  _i3.Future<_i4.Result<_i5.UserPayload, _i6.MessageError>> getProfile() =>
      (super.noSuchMethod(
            Invocation.method(#getProfile, []),
            returnValue:
                _i3.Future<_i4.Result<_i5.UserPayload, _i6.MessageError>>.value(
                  _i7.dummyValue<_i4.Result<_i5.UserPayload, _i6.MessageError>>(
                    this,
                    Invocation.method(#getProfile, []),
                  ),
                ),
          )
          as _i3.Future<_i4.Result<_i5.UserPayload, _i6.MessageError>>);

  @override
  _i3.Future<_i4.Result<_i5.LoginPayload, _i6.UserError>> register(
    String? username,
    String? email,
    String? password,
    _i8.File? avatar,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#register, [username, email, password, avatar]),
            returnValue:
                _i3.Future<_i4.Result<_i5.LoginPayload, _i6.UserError>>.value(
                  _i7.dummyValue<_i4.Result<_i5.LoginPayload, _i6.UserError>>(
                    this,
                    Invocation.method(#register, [
                      username,
                      email,
                      password,
                      avatar,
                    ]),
                  ),
                ),
          )
          as _i3.Future<_i4.Result<_i5.LoginPayload, _i6.UserError>>);

  @override
  _i3.Future<_i4.Result<_i5.UserPayload, _i6.UserError>> promoteToAdmin(
    String? userId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#promoteToAdmin, [userId]),
            returnValue:
                _i3.Future<_i4.Result<_i5.UserPayload, _i6.UserError>>.value(
                  _i7.dummyValue<_i4.Result<_i5.UserPayload, _i6.UserError>>(
                    this,
                    Invocation.method(#promoteToAdmin, [userId]),
                  ),
                ),
          )
          as _i3.Future<_i4.Result<_i5.UserPayload, _i6.UserError>>);
}
