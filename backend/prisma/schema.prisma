// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  username      String
  email         String         @unique
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  trips         Trip[]
  refreshTokens RefreshToken[]
  avatarUrl     String?
  notifications Notification[]

  @@index([email])
}

model Trip {
  id            String         @id @default(cuid())
  name          String
  destination   String
  budget        Float
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses      Expense[]
  imgUrl        String?
  notifications Notification[]

  @@index([startDate, endDate, userId])
}

model Expense {
  id        String   @id @default(cuid())
  name      String
  amount    Float
  category  Category @default(OTHER)
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tripId    String
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  notes     String?

  @@index([tripId, category, date])
}

enum Category {
  FOOD
  TRANSPORTATION
  ACCOMMODATION
  ENTERTAINMENT
  SHOPPING
  OTHER
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model BlackListToken {
  id          String   @id @default(cuid())
  accessToken String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([accessToken])
}

model Notification {
  id      String @id @default(cuid())
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tripId  String
  trip    Trip   @relation(fields: [tripId], references: [id], onDelete: Cascade)
  surplus Float
}
